// üêª‚Äç‚ùÑÔ∏èüßä provisionerd: Deploy VMs with code.
// Copyright 2023-2024 Noelware, LLC. <team@noelware.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package noelware.provisionerd.v1;
option java_multiple_files = true;
option java_package = "org.noelware.provisionerd.protobufs.v1";
option go_package = "go.noelware.org/protos/generated/provisionerd;provisionerd";

import "noelware/provisionerd/v1/networking.proto";
import "noelware/provisionerd/v1/disks.proto";
import "noelware/provisionerd/v1/types.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// `Daemon` service is represented as the `provisionerd` daemon, which is a persistent
// process in the background that checks the lively hood of all VMs created by the daemon
// with the specified backend.
service Daemon {
    // `Status` will view the status of a specific VM.
    rpc Status(StatusRequest) returns (StatusResponse);

    // `Create` will create a VM with the given configuration from the HCL-based file.
    rpc Create(CreateRequest) returns (CreateResponse);

    // `Destroy` will destroy a VM and its resources.
    rpc Destroy(DestroyRequest) returns (DestroyResponse);

    // `List` returns a list of all VMs created by provisionerd.
    rpc List(ListRequest) returns (ListResponse);

    // `Ping` is a simple Ping! request to check if the daemon is alive and well.
    // It also returns the status of the VM backend itself.
    rpc Ping(PingRequest) returns (PingResponse);
}

// Represents the request payload for the `Ping` RPC.
message PingRequest {}

// Represents the response for the `Ping` RPC.
message PingResponse {
    // Pong!
    bool pong = 1;
}

message ListRequest {
    // filter string to query VMs by
    optional string filter = 1;
}

message ListResponse {
    // List of available VMs based off the contraints of the [`ListRequest`].
    repeated noelware.provisionerd.v1.VM vms = 1;
}

message StatusRequest {
    // list of IDs to query the status of any VM. If a wildcard (`*`) appears, then it'll
    // just return the status of all VMs
    repeated string ids = 1;
}

message StatusResponse {
    // List of the statuses of the VMs that were queried.
    repeated StatusVM vms = 1;
}

// Status of a specific VM
message StatusVM {
    // VM ID
    string id = 1;

    // name of the VM
    string name = 2;

    // description of this vm
    string description = 3;

    // status of the VM
    noelware.provisionerd.v1.Status status = 4;

    // labels the VM has
    repeated noelware.provisionerd.v1.LabelDescriptor labels = 5;
}

message CreateRequest {
    // Name of the VM. It cannot exceed over 32 characters and can only be represented
    // in alphanumeric characters, `-`, `_`, and `.`
    string name = 1;

    // Description of this VM.
    optional string description = 2;

    // List of labels to attach to this create request.
    repeated noelware.provisionerd.v1.LabelDescriptor labels = 3;

    // Specifies which backend to use if available. By default, this will provision
    // in the backend that is initialized by the daemon.
    optional noelware.provisionerd.v1.Backend backend = 4;

    // Networking configuration for this VM.
    optional noelware.provisionerd.v1.networking.Networking networking = 5;

    // list of disks to use for the VM, it'll be allocated on the machine.
    repeated noelware.provisionerd.v1.disks.Disk disks = 6;
}

message CreateResponse {
    // It was successful.
    oneof Success {
        // returns the UUID of the VM
        string id = 1;
    }

    oneof Failure {
        // why the creation of the VM failed in a humane message
        string message = 2;

        // more contextual information on why the VM failed to create
        google.protobuf.Struct details = 3;
    }
}

message DestroyRequest {
    // UUID of the VM to destroy
    string id = 1;
}

message DestroyResponse {
    // It was successful and all allocated resources are free'd.
    oneof Success {
        bool acknowledged = 1;
    }

    oneof Failure {
        // why the destruction of the VM failed in a humane message
        string message = 2;

        // more contextual information on why the VM failed to destroy itself
        google.protobuf.Struct details = 3;
    }
}
